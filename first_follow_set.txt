First:
<program>: def, int, double, IDENTIFIER, if, while, print, return, ;, .
<fdecls>: def, e
<fdec>: def
<params>: int, double
<params2>: COMMA, e
<type_var>: int, double
<fname>: IDENTIFIER
<declarations>: int, double, e
<declarations_seq>: int, double, IDENTIFIER, if, while, print, return, ;, e
<decl>: int, double
<type>: int, double
<varlist>: IDENTIFIER
<varlist2>: COMMA, e
<statement_seq>: IDENTIFIER, if, while, print, return, ;, e
<statement_seq2>: ;, e
<statement>: IDENTIFIER, if, while, print, return, e
<if>: if
<else>: else, e
<built_in>: print, return
<bexpr>: -, IDENTIFIER, T_INT, T_DOUBLE, (, not
<bexpr2>: or, e
<bterm>: -, IDENTIFIER, T_INT, T_DOUBLE, (, not
<bterm2>: and, e
<bfactor>: -, IDENTIFIER, T_INT, T_DOUBLE, (, not
<bfactor2>: LT, GT, EQUAL, LTE, GTE, NOT, e
<expr>: -, IDENTIFIER, T_INT, T_DOUBLE, (
<expr2>: +, -, e
<term>: -, IDENTIFIER, T_INT, T_DOUBLE, (
<term2>: *, /, %, e
<neg_factor>: -, IDENTIFIER, T_INT, T_DOUBLE, (
<factor>: IDENTIFIER, T_INT, T_DOUBLE, (
<factor2>: [, (, e
<exprseq>: -, IDENTIFIER, T_INT, T_DOUBLE, (, not, e
<exprseq2>: COMMA, e
<comp>: LT, GT, EQUAL, LTE, GTE, NOT
<var>: IDENTIFIER
<var2>: [, e
<id>: IDENTIFIER
<number>: T_INT, T_DOUBLE


Follow:
<program>: $
<fdecls>: int, double, IDENTIFIER, if, while, print, return, ;, .
<fdec>: ;
<params>: )
<params2>: )
<type_var>: ), COMMA
<fname>: (
<declarations>: IDENTIFIER, if, while, print, return, ;, ., fed
<declarations_seq>: ., fed
<decl>: ;
<type>: IDENTIFIER
<varlist>: ;
<varlist2>: ;
<statement_seq>: ., fed, od, else, fi
<statement_seq2>: ., fed, od, else, fi
<statement>: ., fed, od, else, fi, ;
<if>: ., fed, od, else, fi, ;
<else>: fi
<built_in>: IDENTIFIER, T_INT, T_DOUBLE, (, not
<bexpr>: ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<bexpr2>: ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<bterm>: or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<bterm2>: or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<bfactor>: and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<bfactor2>: and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<expr>: LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<expr2>: LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<term>: +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<term2>: +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<neg_factor>: *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<factor>: *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<factor2>: *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]
<exprseq>: )
<exprseq2>: )
<comp>: IDENTIFIER, T_INT, T_DOUBLE, (
<var>: ), COMMA, ;, =
<var2>: *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ], =
<id>: (, [, *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ], =
<number>: *, /, %, +, -, LT, GT, EQUAL, LTE, GTE, NOT, and, or, ., fed, od, else, fi, ;, do, then, ), COMMA, ]