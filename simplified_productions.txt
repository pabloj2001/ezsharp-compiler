<program> ::= <fdecls> <declarations_seq>.

<fdecls> ::= <fdec>; <fdecls> | e

<fdec> ::= def <type> <fname> [ADD_FUNC] ( <params> ) [NEW_SCOPE] <declarations_seq> fed [POP_SCOPE]

<params> ::= <type_var> [ADD_PARAM] <params2> | e
<params2> ::= , <params> | e
<type_var> ::= <type> <var>

<fname> ::= <id>

<declarations> ::= <decl>; <declarations> | e

<declarations_seq> ::= <declarations> <statement_seq>

<decl> := <type> <varlist>

<type> := int [SET_TYPE] | double [SET_TYPE]

<varlist> ::= <var> [ADD_VAR_DECL] <varlist2>
<varlist2> ::= , <varlist> | e

<statement_seq> ::= <statement><statement_seq2>
<statement_seq2> ::= ; <statement_seq> | e

<statement> ::=
		<var> = [START_TYPE_TREE] <expr> [CHECK_VAR_TYPE] |
        <if> |
        while [START_TYPE_TREE] <bexpr> do <statement_seq> od |
        <built_in> [START_TYPE_TREE] <expr> | e

<if> ::= if [START_TYPE_TREE] <bexpr> then <statement_seq> <else> fi
<else> ::= else <statement_seq> | e

<built_in> ::= print | return

<expr> ::= <term> <expr2> [CHECK_TYPE]
<expr2> ::= + [SPLIT_TREE] <expr> | - [SPLIT_TREE] <expr> | e

<term> ::= <factor> <term2> [CHECK_TYPE]
<term2> ::= * [SPLIT_TREE] <term> | / [SPLIT_TREE] <term> | % [SPLIT_TREE] <term> | e

<factor> ::= <id><factor2> | <number> [SET_LITERAL] | ( [SPLIT_TREE] <expr> )
<factor2> ::= <var2> | [SET_CURR_FUNC] (<exprseq>) [POP_CURR_FUNC]

<exprseq> ::= [START_TYPE_TREE] <expr> [CHECK_PARAM_TYPE] <exprseq2> | e
<exprseq2> ::= , <exprseq> | e

<bexpr> ::= <bterm> <bexpr2> [CHECK_TYPE]
<bexpr2> ::= or <bexpr> | e

<bterm> ::= <bfactor> <bterm2> [CHECK_TYPE]
<bterm2> ::= and <bterm> | e

<bfactor> ::= (<bfactor2>) | not <bfactor>
<bfactor2> ::= <bexpr> | <exprb> <comp> <exprb>

<exprb> ::= <termb> <exprb2>
<exprb2> ::= + <exprb> | - <exprb> | e
<termb> ::= <factorb> <termb2>
<termb2> ::= * <termb> | / <termb> | % <termb> | e
<factorb> ::= <id><factor2> | <number>

<comp> ::= LT | GT | EQUAL | LTE | GTE | NOT

<var> ::= <id><var2>
<var2> ::= OPEN_SQR_BRACKET [START_TYPE_TREE] <expr> [CHECK_INDEX_TYPE] CLOSING_SQR_BRACKET [SET_IS_ARRAY] | e

<id> ::= IDENTIFIER [SET_ID]

<number> ::= T_INT | T_DOUBLE