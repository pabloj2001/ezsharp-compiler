<program> ::= <fdecls> <declarations_seq>.

<fdecls> ::= <fdec>; <fdecls> | e

<fdec> ::= def <type> <fname> [SET_FUNC] ( <params> ) [ADD_FUNC_DECL] <declarations_seq> fed [POP_SCOPE]

<params> ::= <type_var> [ADD_PARAM] <params2> | e
<params2> ::= , <params> | e
<type_var> ::= <type> <var>

<fname> ::= <id>

<declarations> ::= <decl>; <declarations> | e

<declarations_seq> ::= <declarations> <statement_seq>

<decl> := <type> <varlist> [CLEAR_VAR_DECL]

<type> := int [SET_TYPE] | double [SET_TYPE]

<varlist> ::= <var> [ADD_VAR_DECL] <varlist2>
<varlist2> ::= , <varlist> | e

<statement_seq> ::= <statement><statement_seq2>
<statement_seq2> ::= ; <statement_seq> | e

<statement> ::=
		[START_ASSIGNMENT] <var> = [START_TYPE_TREE] <bexpr> [CHECK_VAR_TYPE] [ADD_ASSIGNMENT] |
        <if> |
        while [START_WHILE] [START_TYPE_TREE] <bexpr> [ADD_CONDITION] do [NEW_SCOPE] <statement_seq> [ADD_COND_STATEMENT] od |
        <built_in> [START_TYPE_TREE] <bexpr> [ADD_TYPE_TREE] | e

<if> ::= if [START_IF] [START_TYPE_TREE] <bexpr> [ADD_CONDITION] then [NEW_SCOPE] <statement_seq> [ADD_COND_STATEMENT] <else> fi
<else> ::= else [START_ELSE] [NEW_SCOPE] <statement_seq> [ADD_COND_STATEMENT] | e

<built_in> ::= print [START_PRINT] | return [START_RETURN]

<bexpr> ::= <bterm> <bexpr2>
<bexpr2> ::= or [SPLIT_TREE] <bexpr> [CHECK_TYPE] | e

<bterm> ::= <bfactor> <bterm2>
<bterm2> ::= and [SPLIT_TREE] <bterm> [CHECK_TYPE] | e

<bfactor> ::= <expr> <bfactor2> | not [ADD_OPERATOR] <bfactor> [CHECK_TYPE]
<bfactor2> ::= <comp> [SPLIT_TREE] <expr> [CHECK_TYPE] | e

<expr> ::= <term> <expr2>
<expr2> ::= + [SPLIT_TREE] <expr> [CHECK_TYPE] | - [SPLIT_TREE] <expr> [CHECK_TYPE] | e

<term> ::= <neg_factor> <term2>
<term2> ::= * [SPLIT_TREE] <term> [CHECK_TYPE] | / [SPLIT_TREE] <term> [CHECK_TYPE] | % [SPLIT_TREE] <term> [CHECK_TYPE] | e

<neg_factor> ::= - [ADD_OPERATOR] <factor> [CHECK_TYPE] | <factor>
<factor> ::= <id><factor2> | <number> [SET_LITERAL] | ( [ADD_OPERATOR] <bexpr> ) [CHECK_TYPE]
<factor2> ::= <var2> | [ADD_FUNC_CHECK] (<exprseq>) [POP_FUNC_CHECK]

<exprseq> ::= [START_TYPE_TREE] <bexpr> [CHECK_PARAM_TYPE] [ADD_TYPE_TREE] <exprseq2> | e
<exprseq2> ::= , <exprseq> | e

<comp> ::= LT | GT | EQUAL | LTE | GTE | NOT

<var> ::= <id><var2>
<var2> ::= [ [START_TYPE_TREE] <bexpr> [SET_ARRAY] ] | e

<id> ::= IDENTIFIER [SET_ID]

<number> ::= T_INT | T_DOUBLE